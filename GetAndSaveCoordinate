using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using ARLocation;
using TMPro;
using static System.Net.WebRequestMethods;

public class GetAndSaveCoordinate : MonoBehaviour
{
    public static saver Instance { get; private set; }

    public string longvalue;
    public string latvalue;
    private int coorvalue;
    private int coortotal = 1;
    private ARLocationProvider locationProvider;
    public TextMeshProUGUI longitude;
    public TextMeshProUGUI latitude;
    public TextMeshProUGUI totalCoordUi;

    public TextMeshProUGUI linkCoord1;
    public TextMeshProUGUI linkCoord2;
    public TextMeshProUGUI linkCoord3;
    public TextMeshProUGUI linkCoord4;
    public TextMeshProUGUI linkCoord5;
    public TextMeshProUGUI linkCoord6;
    public TextMeshProUGUI linkCoord7;
    public TextMeshProUGUI linkCoord8;
    public TextMeshProUGUI linkCoord9;
    public TextMeshProUGUI linkCoord10;


    public string loclink1;
    public string loclink2;
    public string loclink3;
    public string loclink4;
    public string loclink5;
    public string loclink6;
    public string loclink7;
    public string loclink8;
    public string loclink9;
    public string loclink10;

    public GameObject panel1;
    public GameObject panel2;
    public GameObject panel3;
    public GameObject panel4;
    public GameObject panel5;
    public GameObject panel6;
    public GameObject panel7;
    public GameObject panel8;
    public GameObject panel9;
    public GameObject panel10;



    private string[] CoordList = new string[10];
    public List<string> CoordDispList = new List<string>();
    //private stre
    // Change the size as needed
    //private int currentIndex = 0;
    private void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
            DontDestroyOnLoad(gameObject);
        }
        else
        {
            Destroy(gameObject);
        }
    }
    void Start()
    {
        locationProvider = ARLocationProvider.Instance;
    }
    void Update()
    {
        longvalue = locationProvider.CurrentLocation.longitude.ToString();
        latvalue = locationProvider.CurrentLocation.latitude.ToString();
        longitude.text = "Longitude: " + longvalue;
        latitude.text = "Latitude: " + latvalue;
        //linkCoord1.text = "Coordinat: " + longvalue + "," + latvalue;
        loclink1 = CoordList[0];
        loclink2 = CoordList[1];
        loclink3 = CoordList[2];
        loclink4 = CoordList[3];
        loclink5 = CoordList[4];
        loclink6 = CoordList[5];
        loclink7 = CoordList[6];
        loclink8 = CoordList[7];
        loclink9 = CoordList[8];
        loclink10 = CoordList[9];

        linkCoord1.text = loclink1;
        linkCoord2.text = loclink2;
        linkCoord3.text = loclink3;
        linkCoord4.text = loclink4;
        linkCoord5.text = loclink5;
        linkCoord6.text = loclink6;
        linkCoord7.text = loclink7;
        linkCoord8.text = loclink8;
        linkCoord9.text = loclink9;
        linkCoord10.text = loclink10;

        if (loclink1 != null)
        {
            panel1.SetActive(true);
        }
        if (loclink2 != null)
        {
            panel2.SetActive(true);
        }
        if (loclink3 != null)
        {
            panel3.SetActive(true);
        }
        if (loclink4 != null)
        {
            panel4.SetActive(true);
        }
        if (loclink5 != null)
        {
            panel5.SetActive(true);
        }
        if (loclink6 != null)
        {
            panel6.SetActive(true);
        }
        if (loclink7 != null)
        {
            panel7.SetActive(true);
        }
        if (loclink8 != null)
        {
            panel8.SetActive(true);
        }
        if (loclink9 != null)
        {
            panel9.SetActive(true);
        }
        if (loclink10 != null)
        {
            panel10.SetActive(true);
        }
    }

    public string lat1 = "";
    public string long1 = "";
    int currentIndex = 0;
    public void saveCoord()
    {
        longitude.text = "Longitude: " + longvalue;
        latitude.text = "Latitude: " + latvalue;

        // Update the string array and index
        CoordList[currentIndex] = "http://www.google.com/maps/place/" + latvalue + "," + longvalue; // Change this to your desired string value
        CoordDispList.Add(latvalue + "," + longvalue) ;
        int CoordDispListCount = CoordDispList.Count;

        

        currentIndex = (currentIndex + 1) % CoordList.Length; // Wrap around if necessary
        Invoke(nameof(Savecoords), 1f);
/*      
 *      
        foreach (string coord in CoordList)
        {
            Debug.Log(coord);
        }*/

        coortotal += coorvalue + 1;
        totalCoordUi.text = coortotal.ToString();


        PlayerPrefs.Save();
        //StartCoroutine(TakeScreenshotAndSave());


    }

    public void Savecoords()
    {
        string serializedArray = string.Join(".", CoordDispList);
        PlayerPrefs.SetString("SavedTrashCoords", serializedArray);
        PlayerPrefs.Save();
        Debug.Log(serializedArray);
    }

    private async void RequestPermissionAsynchronously(NativeGallery.PermissionType permissionType, NativeGallery.MediaType mediaTypes)
    {
        NativeGallery.Permission permission = await NativeGallery.RequestPermissionAsync(permissionType, mediaTypes);
        Debug.Log("Permission result: " + permission);
    }

    private IEnumerator TakeScreenshotAndSave()
    {
        yield return new WaitForEndOfFrame();

        Texture2D ss = new Texture2D(Screen.width, Screen.height, TextureFormat.RGB24, false);
        ss.ReadPixels(new Rect(0, 0, Screen.width, Screen.height), 0, 0);
        ss.Apply();

        // Save the screenshot to Gallery/Photos
        NativeGallery.Permission permission = NativeGallery.SaveImageToGallery(ss, "GalleryTest", "Image.png", (success, path) => Debug.Log("Media save result: " + success + " " + path));

        Debug.Log("Permission result: " + permission);

        // To avoid memory leaks
        Destroy(ss);
    }

    private void PickImage(int maxSize)
    {
        NativeGallery.Permission permission = NativeGallery.GetImageFromGallery((path) =>
        {
            Debug.Log("Image path: " + path);
            if (path != null)
            {
                // Create Texture from selected image
                Texture2D texture = NativeGallery.LoadImageAtPath(path, maxSize);
                if (texture == null)
                {
                    Debug.Log("Couldn't load texture from " + path);
                    return;
                }

                // Assign texture to a temporary quad and destroy it after 5 seconds
                GameObject quad = GameObject.CreatePrimitive(PrimitiveType.Quad);
                quad.transform.position = Camera.main.transform.position + Camera.main.transform.forward * 2.5f;
                quad.transform.forward = Camera.main.transform.forward;
                quad.transform.localScale = new Vector3(1f, texture.height / (float)texture.width, 1f);

                Material material = quad.GetComponent<Renderer>().material;
                if (!material.shader.isSupported) // happens when Standard shader is not included in the build
                    material.shader = Shader.Find("Legacy Shaders/Diffuse");

                material.mainTexture = texture;

                Destroy(quad, 5f);

                // If a procedural texture is not destroyed manually, 
                // it will only be freed after a scene change
                Destroy(texture, 5f);
            }
        });

        Debug.Log("Permission result: " + permission);
    }

    private void PickVideo()
    {
        NativeGallery.Permission permission = NativeGallery.GetVideoFromGallery((path) =>
        {
            Debug.Log("Video path: " + path);
            if (path != null)
            {
                // Play the selected video
                Handheld.PlayFullScreenMovie("file://" + path);
            }
        }, "Select a video");

        Debug.Log("Permission result: " + permission);
    }

    // Example code doesn't use this function but it is here for reference
    private void PickImageOrVideo()
    {
        if (NativeGallery.CanSelectMultipleMediaTypesFromGallery())
        {
            NativeGallery.Permission permission = NativeGallery.GetMixedMediaFromGallery((path) =>
            {
                Debug.Log("Media path: " + path);
                if (path != null)
                {
                    // Determine if user has picked an image, video or neither of these
                    switch (NativeGallery.GetMediaTypeOfFile(path))
                    {
                        case NativeGallery.MediaType.Image: Debug.Log("Picked image"); break;
                        case NativeGallery.MediaType.Video: Debug.Log("Picked video"); break;
                        default: Debug.Log("Probably picked something else"); break;
                    }
                }
            }, NativeGallery.MediaType.Image | NativeGallery.MediaType.Video, "Select an image or video");

            Debug.Log("Permission result: " + permission);
        }


    }

    public void openlink1()

    {  
        Application.OpenURL(loclink1);
    }
    public void openlink2()

    {
        Application.OpenURL(loclink2);
    }
    public void openlink3()

    {
        Application.OpenURL(loclink3);
    }
    public void openlink4()

    {
        Application.OpenURL(loclink4);
    }
    public void openlink5()

    {
        Application.OpenURL(loclink5);
    }
    public void openlink6()

    {
        Application.OpenURL(loclink6);
    }
    public void openlink7()

    {
        Application.OpenURL(loclink7);
    }
    public void openlink8()

    {
        Application.OpenURL(loclink8);
    }
    public void openlink9()

    {
        Application.OpenURL(loclink9);
    }
    public void openlink10()

    {
        Application.OpenURL(loclink10);
    }

    public GameObject savedpanel;
    public GameObject mapbtn;

    public void OpenSaved()
    {
        savedpanel.SetActive(true);
        mapbtn.SetActive(true);
    }
    public void CloseSaved()
    {
        savedpanel.SetActive(false);
        mapbtn.SetActive(false);
    }

}
